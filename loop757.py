{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f95084a-3554-4eab-9145-f9c8f30d1058",
   "metadata": {},
   "outputs": [],
   "source": [
    "app_code = '''\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "\n",
    "# --- Load Data ---\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    url = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vQKkIx5eUS4kACrfiO5_tsWwa0iGBq0GEfNxhdru1hAWWvCb3BxjiqwVeEIlZYEc0PmCUL-wuMDs3ob/pub?gid=0&single=true&output=csv\"\n",
    "    df = pd.read_csv(url)\n",
    "    df = df.dropna(subset=['Business Name', 'Category', 'Subcategory', 'Zip Code'])\n",
    "    return df\n",
    "\n",
    "data = load_data()\n",
    "\n",
    "# --- Page Setup ---\n",
    "st.set_page_config(page_title=\"Loop757\", layout=\"centered\")\n",
    "st.title(\"üîÅ Loop757: Discover Local Gems in the 757\")\n",
    "st.caption(\"A data-powered tool to close the loop and keep dollars circulating in our community.\")\n",
    "\n",
    "# --- Filter Sidebar ---\n",
    "st.sidebar.header(\"üìç Filters\")\n",
    "zip_input = st.sidebar.text_input(\"Enter ZIP code (optional):\")\n",
    "search_all_zips = st.sidebar.checkbox(\"Search All ZIP Codes\")\n",
    "category_filter = st.sidebar.selectbox(\"Select Category\", [\"All\"] + sorted(data[\"Category\"].dropna().unique()))\n",
    "subcategory_filter = st.sidebar.selectbox(\"Select Subcategory\", [\"All\"] + sorted(data[\"Subcategory\"].dropna().unique()))\n",
    "black_owned = st.sidebar.checkbox(\"Black-Owned\")\n",
    "women_owned = st.sidebar.checkbox(\"Women-Owned\")\n",
    "keyword_input = st.sidebar.text_input(\"üîç Smart Search (e.g., 'vegan', 'barber', 'mobile')\")\n",
    "\n",
    "# --- Filter Logic ---\n",
    "filtered_data = data.copy()\n",
    "\n",
    "if not search_all_zips and zip_input:\n",
    "    filtered_data = filtered_data[filtered_data[\"Zip Code\"].astype(str).str.contains(zip_input)]\n",
    "\n",
    "if category_filter != \"All\":\n",
    "    filtered_data = filtered_data[filtered_data[\"Category\"] == category_filter]\n",
    "\n",
    "if subcategory_filter != \"All\":\n",
    "    filtered_data = filtered_data[filtered_data[\"Subcategory\"] == subcategory_filter]\n",
    "\n",
    "if black_owned:\n",
    "    filtered_data = filtered_data[filtered_data[\"Black Owned\"].str.lower() == \"yes\"]\n",
    "\n",
    "if women_owned:\n",
    "    filtered_data = filtered_data[filtered_data[\"Women Owned\"].str.lower() == \"yes\"]\n",
    "\n",
    "if keyword_input:\n",
    "    keyword = keyword_input.lower()\n",
    "    mask = (\n",
    "        data[\"Business Name\"].str.lower().str.contains(keyword)\n",
    "        | data[\"Category\"].str.lower().str.contains(keyword)\n",
    "        | data[\"Subcategory\"].str.lower().str.contains(keyword)\n",
    "        | data.get(\"Description\", pd.Series(\"\")).fillna(\"\").str.lower().str.contains(keyword)\n",
    "    )\n",
    "    filtered_data = filtered_data[mask]\n",
    "\n",
    "# --- Results Display ---\n",
    "st.markdown(\"### üíº Recommended Businesses\")\n",
    "if filtered_data.empty:\n",
    "    st.warning(\"No businesses found with the selected filters. Try adjusting your search.\")\n",
    "else:\n",
    "    for _, row in filtered_data.iterrows():\n",
    "        st.markdown(f\"\"\"\n",
    "        **{row['Business Name']}**  \n",
    "        *{row['Category']} ‚Äî {row['Subcategory']}*  \n",
    "        ZIP: {row['Zip Code']}  \n",
    "        {\"üñ§ Black-Owned\" if str(row.get(\"Black Owned\", \"\")).lower() == \"yes\" else \"\"}\n",
    "        {\"üå∏ Women-Owned\" if str(row.get(\"Women Owned\", \"\")).lower() == \"yes\" else \"\"}\n",
    "        \"\"\")\n",
    "        st.markdown(\"---\")\n",
    "'''\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
